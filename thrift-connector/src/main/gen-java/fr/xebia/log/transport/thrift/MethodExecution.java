/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package fr.xebia.log.transport.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MethodExecution implements org.apache.thrift.TBase<MethodExecution, MethodExecution._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MethodExecution");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField THREAD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("threadName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CORRELATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("correlationId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField RETURN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnValue", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField THROWABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("throwableType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXECUTION_TIME_IN_NANO_FIELD_DESC = new org.apache.thrift.protocol.TField("executionTimeInNano", org.apache.thrift.protocol.TType.I64, (short)9);

  public String agentId;
  public String threadName;
  public String correlationId;
  public String className;
  public String methodName;
  public Map<String,ByteBuffer> parameters;
  public String returnValue;
  public String throwableType;
  public long executionTimeInNano;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentId"),
    THREAD_NAME((short)2, "threadName"),
    CORRELATION_ID((short)3, "correlationId"),
    CLASS_NAME((short)4, "className"),
    METHOD_NAME((short)5, "methodName"),
    PARAMETERS((short)6, "parameters"),
    RETURN_VALUE((short)7, "returnValue"),
    THROWABLE_TYPE((short)8, "throwableType"),
    EXECUTION_TIME_IN_NANO((short)9, "executionTimeInNano");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // THREAD_NAME
          return THREAD_NAME;
        case 3: // CORRELATION_ID
          return CORRELATION_ID;
        case 4: // CLASS_NAME
          return CLASS_NAME;
        case 5: // METHOD_NAME
          return METHOD_NAME;
        case 6: // PARAMETERS
          return PARAMETERS;
        case 7: // RETURN_VALUE
          return RETURN_VALUE;
        case 8: // THROWABLE_TYPE
          return THROWABLE_TYPE;
        case 9: // EXECUTION_TIME_IN_NANO
          return EXECUTION_TIME_IN_NANO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTIONTIMEINNANO_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THREAD_NAME, new org.apache.thrift.meta_data.FieldMetaData("threadName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORRELATION_ID, new org.apache.thrift.meta_data.FieldMetaData("correlationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.RETURN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("returnValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THROWABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("throwableType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTION_TIME_IN_NANO, new org.apache.thrift.meta_data.FieldMetaData("executionTimeInNano", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MethodExecution.class, metaDataMap);
  }

  public MethodExecution() {
  }

  public MethodExecution(
    String agentId,
    String threadName,
    String correlationId,
    String className,
    String methodName,
    Map<String,ByteBuffer> parameters,
    long executionTimeInNano)
  {
    this();
    this.agentId = agentId;
    this.threadName = threadName;
    this.correlationId = correlationId;
    this.className = className;
    this.methodName = methodName;
    this.parameters = parameters;
    this.executionTimeInNano = executionTimeInNano;
    setExecutionTimeInNanoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MethodExecution(MethodExecution other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    if (other.isSetThreadName()) {
      this.threadName = other.threadName;
    }
    if (other.isSetCorrelationId()) {
      this.correlationId = other.correlationId;
    }
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetParameters()) {
      Map<String,ByteBuffer> __this__parameters = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.parameters.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__parameters_copy_key = other_element_key;

        ByteBuffer __this__parameters_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

        __this__parameters.put(__this__parameters_copy_key, __this__parameters_copy_value);
      }
      this.parameters = __this__parameters;
    }
    if (other.isSetReturnValue()) {
      this.returnValue = other.returnValue;
    }
    if (other.isSetThrowableType()) {
      this.throwableType = other.throwableType;
    }
    this.executionTimeInNano = other.executionTimeInNano;
  }

  public MethodExecution deepCopy() {
    return new MethodExecution(this);
  }

  @Override
  public void clear() {
    this.agentId = null;
    this.threadName = null;
    this.correlationId = null;
    this.className = null;
    this.methodName = null;
    this.parameters = null;
    this.returnValue = null;
    this.throwableType = null;
    setExecutionTimeInNanoIsSet(false);
    this.executionTimeInNano = 0;
  }

  public String getAgentId() {
    return this.agentId;
  }

  public MethodExecution setAgentId(String agentId) {
    this.agentId = agentId;
    return this;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public String getThreadName() {
    return this.threadName;
  }

  public MethodExecution setThreadName(String threadName) {
    this.threadName = threadName;
    return this;
  }

  public void unsetThreadName() {
    this.threadName = null;
  }

  /** Returns true if field threadName is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadName() {
    return this.threadName != null;
  }

  public void setThreadNameIsSet(boolean value) {
    if (!value) {
      this.threadName = null;
    }
  }

  public String getCorrelationId() {
    return this.correlationId;
  }

  public MethodExecution setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  public void unsetCorrelationId() {
    this.correlationId = null;
  }

  /** Returns true if field correlationId is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrelationId() {
    return this.correlationId != null;
  }

  public void setCorrelationIdIsSet(boolean value) {
    if (!value) {
      this.correlationId = null;
    }
  }

  public String getClassName() {
    return this.className;
  }

  public MethodExecution setClassName(String className) {
    this.className = className;
    return this;
  }

  public void unsetClassName() {
    this.className = null;
  }

  /** Returns true if field className is set (has been assigned a value) and false otherwise */
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  public String getMethodName() {
    return this.methodName;
  }

  public MethodExecution setMethodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  public int getParametersSize() {
    return (this.parameters == null) ? 0 : this.parameters.size();
  }

  public void putToParameters(String key, ByteBuffer val) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String,ByteBuffer>();
    }
    this.parameters.put(key, val);
  }

  public Map<String,ByteBuffer> getParameters() {
    return this.parameters;
  }

  public MethodExecution setParameters(Map<String,ByteBuffer> parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public String getReturnValue() {
    return this.returnValue;
  }

  public MethodExecution setReturnValue(String returnValue) {
    this.returnValue = returnValue;
    return this;
  }

  public void unsetReturnValue() {
    this.returnValue = null;
  }

  /** Returns true if field returnValue is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnValue() {
    return this.returnValue != null;
  }

  public void setReturnValueIsSet(boolean value) {
    if (!value) {
      this.returnValue = null;
    }
  }

  public String getThrowableType() {
    return this.throwableType;
  }

  public MethodExecution setThrowableType(String throwableType) {
    this.throwableType = throwableType;
    return this;
  }

  public void unsetThrowableType() {
    this.throwableType = null;
  }

  /** Returns true if field throwableType is set (has been assigned a value) and false otherwise */
  public boolean isSetThrowableType() {
    return this.throwableType != null;
  }

  public void setThrowableTypeIsSet(boolean value) {
    if (!value) {
      this.throwableType = null;
    }
  }

  public long getExecutionTimeInNano() {
    return this.executionTimeInNano;
  }

  public MethodExecution setExecutionTimeInNano(long executionTimeInNano) {
    this.executionTimeInNano = executionTimeInNano;
    setExecutionTimeInNanoIsSet(true);
    return this;
  }

  public void unsetExecutionTimeInNano() {
    __isset_bit_vector.clear(__EXECUTIONTIMEINNANO_ISSET_ID);
  }

  /** Returns true if field executionTimeInNano is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutionTimeInNano() {
    return __isset_bit_vector.get(__EXECUTIONTIMEINNANO_ISSET_ID);
  }

  public void setExecutionTimeInNanoIsSet(boolean value) {
    __isset_bit_vector.set(__EXECUTIONTIMEINNANO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((String)value);
      }
      break;

    case THREAD_NAME:
      if (value == null) {
        unsetThreadName();
      } else {
        setThreadName((String)value);
      }
      break;

    case CORRELATION_ID:
      if (value == null) {
        unsetCorrelationId();
      } else {
        setCorrelationId((String)value);
      }
      break;

    case CLASS_NAME:
      if (value == null) {
        unsetClassName();
      } else {
        setClassName((String)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((String)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((Map<String,ByteBuffer>)value);
      }
      break;

    case RETURN_VALUE:
      if (value == null) {
        unsetReturnValue();
      } else {
        setReturnValue((String)value);
      }
      break;

    case THROWABLE_TYPE:
      if (value == null) {
        unsetThrowableType();
      } else {
        setThrowableType((String)value);
      }
      break;

    case EXECUTION_TIME_IN_NANO:
      if (value == null) {
        unsetExecutionTimeInNano();
      } else {
        setExecutionTimeInNano((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentId();

    case THREAD_NAME:
      return getThreadName();

    case CORRELATION_ID:
      return getCorrelationId();

    case CLASS_NAME:
      return getClassName();

    case METHOD_NAME:
      return getMethodName();

    case PARAMETERS:
      return getParameters();

    case RETURN_VALUE:
      return getReturnValue();

    case THROWABLE_TYPE:
      return getThrowableType();

    case EXECUTION_TIME_IN_NANO:
      return new Long(getExecutionTimeInNano());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentId();
    case THREAD_NAME:
      return isSetThreadName();
    case CORRELATION_ID:
      return isSetCorrelationId();
    case CLASS_NAME:
      return isSetClassName();
    case METHOD_NAME:
      return isSetMethodName();
    case PARAMETERS:
      return isSetParameters();
    case RETURN_VALUE:
      return isSetReturnValue();
    case THROWABLE_TYPE:
      return isSetThrowableType();
    case EXECUTION_TIME_IN_NANO:
      return isSetExecutionTimeInNano();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MethodExecution)
      return this.equals((MethodExecution)that);
    return false;
  }

  public boolean equals(MethodExecution that) {
    if (that == null)
      return false;

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_threadName = true && this.isSetThreadName();
    boolean that_present_threadName = true && that.isSetThreadName();
    if (this_present_threadName || that_present_threadName) {
      if (!(this_present_threadName && that_present_threadName))
        return false;
      if (!this.threadName.equals(that.threadName))
        return false;
    }

    boolean this_present_correlationId = true && this.isSetCorrelationId();
    boolean that_present_correlationId = true && that.isSetCorrelationId();
    if (this_present_correlationId || that_present_correlationId) {
      if (!(this_present_correlationId && that_present_correlationId))
        return false;
      if (!this.correlationId.equals(that.correlationId))
        return false;
    }

    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className))
        return false;
      if (!this.className.equals(that.className))
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    boolean this_present_returnValue = true && this.isSetReturnValue();
    boolean that_present_returnValue = true && that.isSetReturnValue();
    if (this_present_returnValue || that_present_returnValue) {
      if (!(this_present_returnValue && that_present_returnValue))
        return false;
      if (!this.returnValue.equals(that.returnValue))
        return false;
    }

    boolean this_present_throwableType = true && this.isSetThrowableType();
    boolean that_present_throwableType = true && that.isSetThrowableType();
    if (this_present_throwableType || that_present_throwableType) {
      if (!(this_present_throwableType && that_present_throwableType))
        return false;
      if (!this.throwableType.equals(that.throwableType))
        return false;
    }

    boolean this_present_executionTimeInNano = true;
    boolean that_present_executionTimeInNano = true;
    if (this_present_executionTimeInNano || that_present_executionTimeInNano) {
      if (!(this_present_executionTimeInNano && that_present_executionTimeInNano))
        return false;
      if (this.executionTimeInNano != that.executionTimeInNano)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MethodExecution other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MethodExecution typedOther = (MethodExecution)other;

    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(typedOther.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, typedOther.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadName()).compareTo(typedOther.isSetThreadName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadName, typedOther.threadName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrelationId()).compareTo(typedOther.isSetCorrelationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrelationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correlationId, typedOther.correlationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassName()).compareTo(typedOther.isSetClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, typedOther.className);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodName()).compareTo(typedOther.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, typedOther.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, typedOther.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnValue()).compareTo(typedOther.isSetReturnValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnValue, typedOther.returnValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThrowableType()).compareTo(typedOther.isSetThrowableType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThrowableType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throwableType, typedOther.throwableType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutionTimeInNano()).compareTo(typedOther.isSetExecutionTimeInNano());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionTimeInNano()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionTimeInNano, typedOther.executionTimeInNano);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // AGENT_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.agentId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // THREAD_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.threadName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CORRELATION_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.correlationId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CLASS_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.className = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // METHOD_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.methodName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PARAMETERS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
              this.parameters = new HashMap<String,ByteBuffer>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                String _key2;
                ByteBuffer _val3;
                _key2 = iprot.readString();
                _val3 = iprot.readBinary();
                this.parameters.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // RETURN_VALUE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.returnValue = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // THROWABLE_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.throwableType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // EXECUTION_TIME_IN_NANO
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.executionTimeInNano = iprot.readI64();
            setExecutionTimeInNanoIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.agentId != null) {
      oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
      oprot.writeString(this.agentId);
      oprot.writeFieldEnd();
    }
    if (this.threadName != null) {
      oprot.writeFieldBegin(THREAD_NAME_FIELD_DESC);
      oprot.writeString(this.threadName);
      oprot.writeFieldEnd();
    }
    if (this.correlationId != null) {
      oprot.writeFieldBegin(CORRELATION_ID_FIELD_DESC);
      oprot.writeString(this.correlationId);
      oprot.writeFieldEnd();
    }
    if (this.className != null) {
      oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
      oprot.writeString(this.className);
      oprot.writeFieldEnd();
    }
    if (this.methodName != null) {
      oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
      oprot.writeString(this.methodName);
      oprot.writeFieldEnd();
    }
    if (this.parameters != null) {
      oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.parameters.size()));
        for (Map.Entry<String, ByteBuffer> _iter4 : this.parameters.entrySet())
        {
          oprot.writeString(_iter4.getKey());
          oprot.writeBinary(_iter4.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.returnValue != null) {
      if (isSetReturnValue()) {
        oprot.writeFieldBegin(RETURN_VALUE_FIELD_DESC);
        oprot.writeString(this.returnValue);
        oprot.writeFieldEnd();
      }
    }
    if (this.throwableType != null) {
      if (isSetThrowableType()) {
        oprot.writeFieldBegin(THROWABLE_TYPE_FIELD_DESC);
        oprot.writeString(this.throwableType);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(EXECUTION_TIME_IN_NANO_FIELD_DESC);
    oprot.writeI64(this.executionTimeInNano);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MethodExecution(");
    boolean first = true;

    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadName:");
    if (this.threadName == null) {
      sb.append("null");
    } else {
      sb.append(this.threadName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("correlationId:");
    if (this.correlationId == null) {
      sb.append("null");
    } else {
      sb.append(this.correlationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("className:");
    if (this.className == null) {
      sb.append("null");
    } else {
      sb.append(this.className);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameters:");
    if (this.parameters == null) {
      sb.append("null");
    } else {
      sb.append(this.parameters);
    }
    first = false;
    if (isSetReturnValue()) {
      if (!first) sb.append(", ");
      sb.append("returnValue:");
      if (this.returnValue == null) {
        sb.append("null");
      } else {
        sb.append(this.returnValue);
      }
      first = false;
    }
    if (isSetThrowableType()) {
      if (!first) sb.append(", ");
      sb.append("throwableType:");
      if (this.throwableType == null) {
        sb.append("null");
      } else {
        sb.append(this.throwableType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("executionTimeInNano:");
    sb.append(this.executionTimeInNano);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

